
BluePillLocalisation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003044  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800339c  0800339c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800339c  0800339c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800339c  0800339c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000000c  080033b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080033b0  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b99  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019cd  00000000  00000000  00027c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  000295e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000581  00000000  00000000  00029d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016cb4  00000000  00000000  0002a2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009af1  00000000  00000000  00040f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000816ed  00000000  00000000  0004aa4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b98  00000000  00000000  000cc13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000cdcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003138 	.word	0x08003138

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003138 	.word	0x08003138

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	; (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	; (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200f      	movs	r0, #15
 8000170:	f000 ff15 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000174:	200f      	movs	r0, #15
 8000176:	f000 ff2e 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	2010      	movs	r0, #16
 8000180:	f000 ff0d 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000184:	2010      	movs	r0, #16
 8000186:	f000 ff26 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b34      	ldr	r3, [pc, #208]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a33      	ldr	r2, [pc, #204]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b31      	ldr	r3, [pc, #196]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b2e      	ldr	r3, [pc, #184]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a2d      	ldr	r2, [pc, #180]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b2b      	ldr	r3, [pc, #172]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b28      	ldr	r3, [pc, #160]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a27      	ldr	r2, [pc, #156]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b25      	ldr	r3, [pc, #148]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b22      	ldr	r3, [pc, #136]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a21      	ldr	r2, [pc, #132]	; (8000280 <MX_GPIO_Init+0xe8>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b1f      	ldr	r3, [pc, #124]	; (8000280 <MX_GPIO_Init+0xe8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	603b      	str	r3, [r7, #0]
 800020a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	481c      	ldr	r0, [pc, #112]	; (8000284 <MX_GPIO_Init+0xec>)
 8000214:	f001 fb20 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800021c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021e:	2301      	movs	r3, #1
 8000220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000226:	2302      	movs	r3, #2
 8000228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	4619      	mov	r1, r3
 8000230:	4814      	ldr	r0, [pc, #80]	; (8000284 <MX_GPIO_Init+0xec>)
 8000232:	f001 f98d 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000236:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800023a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800023c:	2303      	movs	r3, #3
 800023e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	480f      	ldr	r0, [pc, #60]	; (8000284 <MX_GPIO_Init+0xec>)
 8000248:	f001 f982 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800024c:	f641 13f3 	movw	r3, #6643	; 0x19f3
 8000250:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000252:	2303      	movs	r3, #3
 8000254:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	4619      	mov	r1, r3
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <MX_GPIO_Init+0xf0>)
 800025e:	f001 f977 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000262:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000266:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000268:	2303      	movs	r3, #3
 800026a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4806      	ldr	r0, [pc, #24]	; (800028c <MX_GPIO_Init+0xf4>)
 8000274:	f001 f96c 	bl	8001550 <HAL_GPIO_Init>

}
 8000278:	bf00      	nop
 800027a:	3720      	adds	r7, #32
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40021000 	.word	0x40021000
 8000284:	40011000 	.word	0x40011000
 8000288:	40010800 	.word	0x40010800
 800028c:	40010c00 	.word	0x40010c00

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fd25 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f94d 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f7ff ff7b 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a2:	f7ff ff53 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80002a6:	f000 fbbb 	bl	8000a20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002aa:	f000 fbe3 	bl	8000a74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, rxData, sizeof(rxData));
 80002ae:	2201      	movs	r2, #1
 80002b0:	498e      	ldr	r1, [pc, #568]	; (80004ec <main+0x25c>)
 80002b2:	488f      	ldr	r0, [pc, #572]	; (80004f0 <main+0x260>)
 80002b4:	f001 ffcb 	bl	800224e <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //wait for the A9G to initialize
	  HAL_UART_Transmit(&huart2, "\nStarting...", sizeof("\nStarting..."), 100);
 80002b8:	2364      	movs	r3, #100	; 0x64
 80002ba:	220d      	movs	r2, #13
 80002bc:	498d      	ldr	r1, [pc, #564]	; (80004f4 <main+0x264>)
 80002be:	488e      	ldr	r0, [pc, #568]	; (80004f8 <main+0x268>)
 80002c0:	f001 ff42 	bl	8002148 <HAL_UART_Transmit>

	  HAL_Delay(5000);
 80002c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80002c8:	f000 fd6e 	bl	8000da8 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, " I waited. Now waiting A9G to reply", sizeof(" I waited. Now waiting A9G to reply"), 100);
 80002cc:	2364      	movs	r3, #100	; 0x64
 80002ce:	2224      	movs	r2, #36	; 0x24
 80002d0:	498a      	ldr	r1, [pc, #552]	; (80004fc <main+0x26c>)
 80002d2:	4889      	ldr	r0, [pc, #548]	; (80004f8 <main+0x268>)
 80002d4:	f001 ff38 	bl	8002148 <HAL_UART_Transmit>
	  do{
		  //HAL_UART_Transmit(&huart2, "Polling a9g..", sizeof("Polling a9g.."), 100);
		  HAL_UART_Transmit(&huart2, ".", sizeof("."), 100);
 80002d8:	2364      	movs	r3, #100	; 0x64
 80002da:	2202      	movs	r2, #2
 80002dc:	4988      	ldr	r1, [pc, #544]	; (8000500 <main+0x270>)
 80002de:	4886      	ldr	r0, [pc, #536]	; (80004f8 <main+0x268>)
 80002e0:	f001 ff32 	bl	8002148 <HAL_UART_Transmit>
		  quickBlink(); //blink for a9g
 80002e4:	f000 fa10 	bl	8000708 <quickBlink>
		  HAL_Delay(2000);
 80002e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ec:	f000 fd5c 	bl	8000da8 <HAL_Delay>
		  clean();
 80002f0:	f000 fadc 	bl	80008ac <clean>
		  HAL_UART_Transmit(&huart1, "AT\r", sizeof("AT\r"), 100);
 80002f4:	2364      	movs	r3, #100	; 0x64
 80002f6:	2204      	movs	r2, #4
 80002f8:	4982      	ldr	r1, [pc, #520]	; (8000504 <main+0x274>)
 80002fa:	487d      	ldr	r0, [pc, #500]	; (80004f0 <main+0x260>)
 80002fc:	f001 ff24 	bl	8002148 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8000300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000304:	f000 fd50 	bl	8000da8 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 8000308:	2364      	movs	r3, #100	; 0x64
 800030a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800030e:	497e      	ldr	r1, [pc, #504]	; (8000508 <main+0x278>)
 8000310:	4879      	ldr	r0, [pc, #484]	; (80004f8 <main+0x268>)
 8000312:	f001 ff19 	bl	8002148 <HAL_UART_Transmit>
	  }while(!found());
 8000316:	f000 fa43 	bl	80007a0 <found>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0db      	beq.n	80002d8 <main+0x48>

	  HAL_UART_Transmit(&huart2, "\nA9G responding! Now starting...\n", sizeof("\nA9G responding! Now starting...\n"), 100);
 8000320:	2364      	movs	r3, #100	; 0x64
 8000322:	2222      	movs	r2, #34	; 0x22
 8000324:	4979      	ldr	r1, [pc, #484]	; (800050c <main+0x27c>)
 8000326:	4874      	ldr	r0, [pc, #464]	; (80004f8 <main+0x268>)
 8000328:	f001 ff0e 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800032c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000330:	f000 fd3a 	bl	8000da8 <HAL_Delay>

	  //Couple of AT to flush
	  clean();
 8000334:	f000 faba 	bl	80008ac <clean>
	  HAL_UART_Transmit(&huart1, "AT\r", sizeof("AT\r"), 100);
 8000338:	2364      	movs	r3, #100	; 0x64
 800033a:	2204      	movs	r2, #4
 800033c:	4971      	ldr	r1, [pc, #452]	; (8000504 <main+0x274>)
 800033e:	486c      	ldr	r0, [pc, #432]	; (80004f0 <main+0x260>)
 8000340:	f001 ff02 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000344:	20c8      	movs	r0, #200	; 0xc8
 8000346:	f000 fd2f 	bl	8000da8 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 800034a:	2364      	movs	r3, #100	; 0x64
 800034c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000350:	496d      	ldr	r1, [pc, #436]	; (8000508 <main+0x278>)
 8000352:	4869      	ldr	r0, [pc, #420]	; (80004f8 <main+0x268>)
 8000354:	f001 fef8 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035c:	f000 fd24 	bl	8000da8 <HAL_Delay>
	  clean();
 8000360:	f000 faa4 	bl	80008ac <clean>
	  HAL_UART_Transmit(&huart1, "AT\r", sizeof("AT\r"), 100);
 8000364:	2364      	movs	r3, #100	; 0x64
 8000366:	2204      	movs	r2, #4
 8000368:	4966      	ldr	r1, [pc, #408]	; (8000504 <main+0x274>)
 800036a:	4861      	ldr	r0, [pc, #388]	; (80004f0 <main+0x260>)
 800036c:	f001 feec 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000370:	20c8      	movs	r0, #200	; 0xc8
 8000372:	f000 fd19 	bl	8000da8 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 8000376:	2364      	movs	r3, #100	; 0x64
 8000378:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800037c:	4962      	ldr	r1, [pc, #392]	; (8000508 <main+0x278>)
 800037e:	485e      	ldr	r0, [pc, #376]	; (80004f8 <main+0x268>)
 8000380:	f001 fee2 	bl	8002148 <HAL_UART_Transmit>
	  clean();
 8000384:	f000 fa92 	bl	80008ac <clean>
	  HAL_Delay(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f000 fd0c 	bl	8000da8 <HAL_Delay>

	  //Activate GPS
	  HAL_Delay(500);
 8000390:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000394:	f000 fd08 	bl	8000da8 <HAL_Delay>
	  clean();
 8000398:	f000 fa88 	bl	80008ac <clean>
	  HAL_UART_Transmit(&huart1, "AT+GPS=1\r", sizeof("AT+GPS=1\r"), 100);
 800039c:	2364      	movs	r3, #100	; 0x64
 800039e:	220a      	movs	r2, #10
 80003a0:	495b      	ldr	r1, [pc, #364]	; (8000510 <main+0x280>)
 80003a2:	4853      	ldr	r0, [pc, #332]	; (80004f0 <main+0x260>)
 80003a4:	f001 fed0 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(200);
 80003a8:	20c8      	movs	r0, #200	; 0xc8
 80003aa:	f000 fcfd 	bl	8000da8 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 80003ae:	2364      	movs	r3, #100	; 0x64
 80003b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80003b4:	4954      	ldr	r1, [pc, #336]	; (8000508 <main+0x278>)
 80003b6:	4850      	ldr	r0, [pc, #320]	; (80004f8 <main+0x268>)
 80003b8:	f001 fec6 	bl	8002148 <HAL_UART_Transmit>

	  //Enable messages in text
	  HAL_Delay(500);
 80003bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c0:	f000 fcf2 	bl	8000da8 <HAL_Delay>
	  clean();
 80003c4:	f000 fa72 	bl	80008ac <clean>
	  HAL_UART_Transmit(&huart1, "AT+CMGF=1\r", sizeof("AT+CMGF=1\r"), 100);
 80003c8:	2364      	movs	r3, #100	; 0x64
 80003ca:	220b      	movs	r2, #11
 80003cc:	4951      	ldr	r1, [pc, #324]	; (8000514 <main+0x284>)
 80003ce:	4848      	ldr	r0, [pc, #288]	; (80004f0 <main+0x260>)
 80003d0:	f001 feba 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(200);
 80003d4:	20c8      	movs	r0, #200	; 0xc8
 80003d6:	f000 fce7 	bl	8000da8 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 80003da:	2364      	movs	r3, #100	; 0x64
 80003dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80003e0:	4949      	ldr	r1, [pc, #292]	; (8000508 <main+0x278>)
 80003e2:	4845      	ldr	r0, [pc, #276]	; (80004f8 <main+0x268>)
 80003e4:	f001 feb0 	bl	8002148 <HAL_UART_Transmit>

	  //Check if sim correctly inserted
	  HAL_Delay(500);
 80003e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ec:	f000 fcdc 	bl	8000da8 <HAL_Delay>
	  clean();
 80003f0:	f000 fa5c 	bl	80008ac <clean>
	  HAL_UART_Transmit(&huart1, "AT+CPIN?\r", sizeof("AT+CPIN?\r"), 100);
 80003f4:	2364      	movs	r3, #100	; 0x64
 80003f6:	220a      	movs	r2, #10
 80003f8:	4947      	ldr	r1, [pc, #284]	; (8000518 <main+0x288>)
 80003fa:	483d      	ldr	r0, [pc, #244]	; (80004f0 <main+0x260>)
 80003fc:	f001 fea4 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000400:	20c8      	movs	r0, #200	; 0xc8
 8000402:	f000 fcd1 	bl	8000da8 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 8000406:	2364      	movs	r3, #100	; 0x64
 8000408:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800040c:	493e      	ldr	r1, [pc, #248]	; (8000508 <main+0x278>)
 800040e:	483a      	ldr	r0, [pc, #232]	; (80004f8 <main+0x268>)
 8000410:	f001 fe9a 	bl	8002148 <HAL_UART_Transmit>

	  //Verification of connection to network
	  do{
		  quickBlink();
 8000414:	f000 f978 	bl	8000708 <quickBlink>
		  quickBlink();
 8000418:	f000 f976 	bl	8000708 <quickBlink>
		  clean();
 800041c:	f000 fa46 	bl	80008ac <clean>
		  HAL_UART_Transmit(&huart1, "AT+CREG?\r", sizeof("AT+CREG?\r"), 100);
 8000420:	2364      	movs	r3, #100	; 0x64
 8000422:	220a      	movs	r2, #10
 8000424:	493d      	ldr	r1, [pc, #244]	; (800051c <main+0x28c>)
 8000426:	4832      	ldr	r0, [pc, #200]	; (80004f0 <main+0x260>)
 8000428:	f001 fe8e 	bl	8002148 <HAL_UART_Transmit>
		  HAL_Delay(200);
 800042c:	20c8      	movs	r0, #200	; 0xc8
 800042e:	f000 fcbb 	bl	8000da8 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 8000432:	2364      	movs	r3, #100	; 0x64
 8000434:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000438:	4933      	ldr	r1, [pc, #204]	; (8000508 <main+0x278>)
 800043a:	482f      	ldr	r0, [pc, #188]	; (80004f8 <main+0x268>)
 800043c:	f001 fe84 	bl	8002148 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, "\nNOT connected to network...", sizeof("\nNOT connected to network..."), 100);
 8000440:	2364      	movs	r3, #100	; 0x64
 8000442:	221d      	movs	r2, #29
 8000444:	4936      	ldr	r1, [pc, #216]	; (8000520 <main+0x290>)
 8000446:	482c      	ldr	r0, [pc, #176]	; (80004f8 <main+0x268>)
 8000448:	f001 fe7e 	bl	8002148 <HAL_UART_Transmit>
		  HAL_Delay(5000);
 800044c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000450:	f000 fcaa 	bl	8000da8 <HAL_Delay>
	  }while(!foundCREG());
 8000454:	f000 f9be 	bl	80007d4 <foundCREG>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0da      	beq.n	8000414 <main+0x184>
	  HAL_UART_Transmit(&huart2, "\nCONNECTED TO NETWORK!\n", sizeof("\nCONNECTED TO NETWORK!\n"), 100);
 800045e:	2364      	movs	r3, #100	; 0x64
 8000460:	2218      	movs	r2, #24
 8000462:	4930      	ldr	r1, [pc, #192]	; (8000524 <main+0x294>)
 8000464:	4824      	ldr	r0, [pc, #144]	; (80004f8 <main+0x268>)
 8000466:	f001 fe6f 	bl	8002148 <HAL_UART_Transmit>

	  //The main while to retrieve the position and send it begins
	  while(1){

		  //sending every 5 mins, and repliying if message receieved
		  for(int i=0; i<18; i++){
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	e036      	b.n	80004de <main+0x24e>
			  clean(); //clean first!
 8000470:	f000 fa1c 	bl	80008ac <clean>
			  HAL_Delay(10000);
 8000474:	f242 7010 	movw	r0, #10000	; 0x2710
 8000478:	f000 fc96 	bl	8000da8 <HAL_Delay>
			  HAL_UART_Transmit(&huart2, "time passed, call incoming?", sizeof("time passed, call incoming?"), 100);
 800047c:	2364      	movs	r3, #100	; 0x64
 800047e:	221c      	movs	r2, #28
 8000480:	4929      	ldr	r1, [pc, #164]	; (8000528 <main+0x298>)
 8000482:	481d      	ldr	r0, [pc, #116]	; (80004f8 <main+0x268>)
 8000484:	f001 fe60 	bl	8002148 <HAL_UART_Transmit>
			  HAL_Delay(200);
 8000488:	20c8      	movs	r0, #200	; 0xc8
 800048a:	f000 fc8d 	bl	8000da8 <HAL_Delay>
			  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 800048e:	2364      	movs	r3, #100	; 0x64
 8000490:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000494:	491c      	ldr	r1, [pc, #112]	; (8000508 <main+0x278>)
 8000496:	4818      	ldr	r0, [pc, #96]	; (80004f8 <main+0x268>)
 8000498:	f001 fe56 	bl	8002148 <HAL_UART_Transmit>
			  if(foundRING()){
 800049c:	f000 f9c6 	bl	800082c <foundRING>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d00b      	beq.n	80004be <main+0x22e>
				  HAL_UART_Transmit(&huart2, "- someone calling! -", sizeof("- someone calling! -"), 100);
 80004a6:	2364      	movs	r3, #100	; 0x64
 80004a8:	2215      	movs	r2, #21
 80004aa:	4920      	ldr	r1, [pc, #128]	; (800052c <main+0x29c>)
 80004ac:	4812      	ldr	r0, [pc, #72]	; (80004f8 <main+0x268>)
 80004ae:	f001 fe4b 	bl	8002148 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, "ATA\r", sizeof("ATA\r"), 100);
 80004b2:	2364      	movs	r3, #100	; 0x64
 80004b4:	2205      	movs	r2, #5
 80004b6:	491e      	ldr	r1, [pc, #120]	; (8000530 <main+0x2a0>)
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <main+0x260>)
 80004ba:	f001 fe45 	bl	8002148 <HAL_UART_Transmit>
			  }

			  if(foundMESSAGE()){
 80004be:	f000 f9d5 	bl	800086c <foundMESSAGE>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d007      	beq.n	80004d8 <main+0x248>
				  HAL_UART_Transmit(&huart2, "- someone TEXTING! -", sizeof("- someone TEXTING! -"), 100);
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	2215      	movs	r2, #21
 80004cc:	4919      	ldr	r1, [pc, #100]	; (8000534 <main+0x2a4>)
 80004ce:	480a      	ldr	r0, [pc, #40]	; (80004f8 <main+0x268>)
 80004d0:	f001 fe3a 	bl	8002148 <HAL_UART_Transmit>
				  get_position_send_message();
 80004d4:	f000 f86c 	bl	80005b0 <get_position_send_message>
		  for(int i=0; i<18; i++){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3301      	adds	r3, #1
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b11      	cmp	r3, #17
 80004e2:	ddc5      	ble.n	8000470 <main+0x1e0>
			  }

		  }

		  get_position_send_message();
 80004e4:	f000 f864 	bl	80005b0 <get_position_send_message>
		  for(int i=0; i<18; i++){
 80004e8:	e7bf      	b.n	800046a <main+0x1da>
 80004ea:	bf00      	nop
 80004ec:	20000028 	.word	0x20000028
 80004f0:	200001c0 	.word	0x200001c0
 80004f4:	08003150 	.word	0x08003150
 80004f8:	20000208 	.word	0x20000208
 80004fc:	08003160 	.word	0x08003160
 8000500:	08003184 	.word	0x08003184
 8000504:	08003188 	.word	0x08003188
 8000508:	2000002c 	.word	0x2000002c
 800050c:	0800318c 	.word	0x0800318c
 8000510:	080031b0 	.word	0x080031b0
 8000514:	080031bc 	.word	0x080031bc
 8000518:	080031c8 	.word	0x080031c8
 800051c:	080031d4 	.word	0x080031d4
 8000520:	080031e0 	.word	0x080031e0
 8000524:	08003200 	.word	0x08003200
 8000528:	08003218 	.word	0x08003218
 800052c:	08003234 	.word	0x08003234
 8000530:	0800324c 	.word	0x0800324c
 8000534:	08003254 	.word	0x08003254

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b090      	sub	sp, #64	; 0x40
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fdb4 	bl	80030b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000566:	2300      	movs	r3, #0
 8000568:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	4618      	mov	r0, r3
 8000570:	f001 f98a 	bl	8001888 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800057a:	f000 f9c3 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fbf8 	bl	8001d8c <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005a2:	f000 f9af 	bl	8000904 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3740      	adds	r7, #64	; 0x40
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <get_position_send_message>:

/* USER CODE BEGIN 4 */



void get_position_send_message(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
	  //Initial acquisition of the position
	  do{
		  quickBlink();
 80005b6:	f000 f8a7 	bl	8000708 <quickBlink>
		  quickBlink();
 80005ba:	f000 f8a5 	bl	8000708 <quickBlink>
		  quickBlink();
 80005be:	f000 f8a3 	bl	8000708 <quickBlink>
		  quickBlink();
 80005c2:	f000 f8a1 	bl	8000708 <quickBlink>

		  HAL_Delay(5000);
 80005c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80005ca:	f000 fbed 	bl	8000da8 <HAL_Delay>
		  if(foundRING()){
 80005ce:	f000 f92d 	bl	800082c <foundRING>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <get_position_send_message+0x40>
			  HAL_UART_Transmit(&huart2, "- someone calling! -", sizeof("- someone calling! -"), 100);
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	2215      	movs	r2, #21
 80005dc:	493e      	ldr	r1, [pc, #248]	; (80006d8 <get_position_send_message+0x128>)
 80005de:	483f      	ldr	r0, [pc, #252]	; (80006dc <get_position_send_message+0x12c>)
 80005e0:	f001 fdb2 	bl	8002148 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, "ATA\r", sizeof("ATA\r"), 100);
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	2205      	movs	r2, #5
 80005e8:	493d      	ldr	r1, [pc, #244]	; (80006e0 <get_position_send_message+0x130>)
 80005ea:	483e      	ldr	r0, [pc, #248]	; (80006e4 <get_position_send_message+0x134>)
 80005ec:	f001 fdac 	bl	8002148 <HAL_UART_Transmit>
		  }
		  HAL_Delay(200);
 80005f0:	20c8      	movs	r0, #200	; 0xc8
 80005f2:	f000 fbd9 	bl	8000da8 <HAL_Delay>
		  clean();
 80005f6:	f000 f959 	bl	80008ac <clean>
		  HAL_UART_Transmit(&huart1, "AT+LOCATION=2\r", sizeof("AT+LOCATION=2\r"), 100);
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	220f      	movs	r2, #15
 80005fe:	493a      	ldr	r1, [pc, #232]	; (80006e8 <get_position_send_message+0x138>)
 8000600:	4838      	ldr	r0, [pc, #224]	; (80006e4 <get_position_send_message+0x134>)
 8000602:	f001 fda1 	bl	8002148 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8000606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060a:	f000 fbcd 	bl	8000da8 <HAL_Delay>
		  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000614:	4935      	ldr	r1, [pc, #212]	; (80006ec <get_position_send_message+0x13c>)
 8000616:	4831      	ldr	r0, [pc, #196]	; (80006dc <get_position_send_message+0x12c>)
 8000618:	f001 fd96 	bl	8002148 <HAL_UART_Transmit>
	  }while(!found());
 800061c:	f000 f8c0 	bl	80007a0 <found>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0c7      	beq.n	80005b6 <get_position_send_message+0x6>

	  HAL_UART_Transmit(&huart2, "\nPosition found, with response:\n", sizeof("\nPosition found, with response:\n"), 100);
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	2221      	movs	r2, #33	; 0x21
 800062a:	4931      	ldr	r1, [pc, #196]	; (80006f0 <get_position_send_message+0x140>)
 800062c:	482b      	ldr	r0, [pc, #172]	; (80006dc <get_position_send_message+0x12c>)
 800062e:	f001 fd8b 	bl	8002148 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000638:	492c      	ldr	r1, [pc, #176]	; (80006ec <get_position_send_message+0x13c>)
 800063a:	4828      	ldr	r0, [pc, #160]	; (80006dc <get_position_send_message+0x12c>)
 800063c:	f001 fd84 	bl	8002148 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "\nEXTRACTED value:", sizeof("\nEXTRACTED value:"), 100);
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	2212      	movs	r2, #18
 8000644:	492b      	ldr	r1, [pc, #172]	; (80006f4 <get_position_send_message+0x144>)
 8000646:	4825      	ldr	r0, [pc, #148]	; (80006dc <get_position_send_message+0x12c>)
 8000648:	f001 fd7e 	bl	8002148 <HAL_UART_Transmit>

	  uint8_t coordinates[20];
	  extractCoordinates(coordinates);
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f884 	bl	800075c <extractCoordinates>
	  HAL_UART_Transmit(&huart2, coordinates, sizeof(coordinates), 100);
 8000654:	1d39      	adds	r1, r7, #4
 8000656:	2364      	movs	r3, #100	; 0x64
 8000658:	2214      	movs	r2, #20
 800065a:	4820      	ldr	r0, [pc, #128]	; (80006dc <get_position_send_message+0x12c>)
 800065c:	f001 fd74 	bl	8002148 <HAL_UART_Transmit>

	  //Sending a message
	  HAL_UART_Transmit(&huart2, "\nSending message now..\n", sizeof("\nSending message now..\n"), 100);
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2218      	movs	r2, #24
 8000664:	4924      	ldr	r1, [pc, #144]	; (80006f8 <get_position_send_message+0x148>)
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <get_position_send_message+0x12c>)
 8000668:	f001 fd6e 	bl	8002148 <HAL_UART_Transmit>
	  clean();
 800066c:	f000 f91e 	bl	80008ac <clean>
	  HAL_UART_Transmit(&huart1, "AT+CMGS=\"+393774001005\"\r", sizeof("AT+CMGS=\"+393774001005\"\r"), 100);
 8000670:	2364      	movs	r3, #100	; 0x64
 8000672:	2219      	movs	r2, #25
 8000674:	4921      	ldr	r1, [pc, #132]	; (80006fc <get_position_send_message+0x14c>)
 8000676:	481b      	ldr	r0, [pc, #108]	; (80006e4 <get_position_send_message+0x134>)
 8000678:	f001 fd66 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f000 fb92 	bl	8000da8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, coordinates, sizeof(coordinates), 100);
 8000684:	1d39      	adds	r1, r7, #4
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	2214      	movs	r2, #20
 800068a:	4816      	ldr	r0, [pc, #88]	; (80006e4 <get_position_send_message+0x134>)
 800068c:	f001 fd5c 	bl	8002148 <HAL_UART_Transmit>
	  uint8_t end_character[] = { 0x1A };
 8000690:	231a      	movs	r3, #26
 8000692:	703b      	strb	r3, [r7, #0]
	  HAL_UART_Transmit(&huart1, end_character, sizeof(end_character), 100);
 8000694:	4639      	mov	r1, r7
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	2201      	movs	r2, #1
 800069a:	4812      	ldr	r0, [pc, #72]	; (80006e4 <get_position_send_message+0x134>)
 800069c:	f001 fd54 	bl	8002148 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, "\nNow waiting 15 secs before reading if it went well..\n", sizeof("\nNow waiting 15 secs before reading if it went well..\n"), 100);
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2237      	movs	r2, #55	; 0x37
 80006a4:	4916      	ldr	r1, [pc, #88]	; (8000700 <get_position_send_message+0x150>)
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <get_position_send_message+0x12c>)
 80006a8:	f001 fd4e 	bl	8002148 <HAL_UART_Transmit>
	  HAL_Delay(15000);
 80006ac:	f643 2098 	movw	r0, #15000	; 0x3a98
 80006b0:	f000 fb7a 	bl	8000da8 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, received, sizeof(received), 100);
 80006b4:	2364      	movs	r3, #100	; 0x64
 80006b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006ba:	490c      	ldr	r1, [pc, #48]	; (80006ec <get_position_send_message+0x13c>)
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <get_position_send_message+0x12c>)
 80006be:	f001 fd43 	bl	8002148 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, "\nDid you see it? Now I go on\n", sizeof("\nDid you see it? Now I go on\n"), 100);
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	221e      	movs	r2, #30
 80006c6:	490f      	ldr	r1, [pc, #60]	; (8000704 <get_position_send_message+0x154>)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <get_position_send_message+0x12c>)
 80006ca:	f001 fd3d 	bl	8002148 <HAL_UART_Transmit>

}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	08003234 	.word	0x08003234
 80006dc:	20000208 	.word	0x20000208
 80006e0:	0800324c 	.word	0x0800324c
 80006e4:	200001c0 	.word	0x200001c0
 80006e8:	0800326c 	.word	0x0800326c
 80006ec:	2000002c 	.word	0x2000002c
 80006f0:	0800327c 	.word	0x0800327c
 80006f4:	080032a0 	.word	0x080032a0
 80006f8:	080032b4 	.word	0x080032b4
 80006fc:	080032cc 	.word	0x080032cc
 8000700:	080032e8 	.word	0x080032e8
 8000704:	08003320 	.word	0x08003320

08000708 <quickBlink>:

void quickBlink(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	4811      	ldr	r0, [pc, #68]	; (8000758 <quickBlink+0x50>)
 8000714:	f001 f8a0 	bl	8001858 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000718:	2064      	movs	r0, #100	; 0x64
 800071a:	f000 fb45 	bl	8000da8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <quickBlink+0x50>)
 8000726:	f001 f897 	bl	8001858 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f000 fb3c 	bl	8000da8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <quickBlink+0x50>)
 8000738:	f001 f88e 	bl	8001858 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f000 fb33 	bl	8000da8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <quickBlink+0x50>)
 800074a:	f001 f885 	bl	8001858 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800074e:	2064      	movs	r0, #100	; 0x64
 8000750:	f000 fb2a 	bl	8000da8 <HAL_Delay>

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40011000 	.word	0x40011000

0800075c <extractCoordinates>:

void extractCoordinates(uint8_t * output) {
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	  //uint8_t coordinates[20];
	  int i = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
	  for(int a=16; a<36; a++){
 8000768:	2310      	movs	r3, #16
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	e00d      	b.n	800078a <extractCoordinates+0x2e>
		  output[i]=received[a];
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4413      	add	r3, r2
 8000774:	4909      	ldr	r1, [pc, #36]	; (800079c <extractCoordinates+0x40>)
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	440a      	add	r2, r1
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	701a      	strb	r2, [r3, #0]
		  i++;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
	  for(int a=16; a<36; a++){
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	3301      	adds	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2b23      	cmp	r3, #35	; 0x23
 800078e:	ddee      	ble.n	800076e <extractCoordinates+0x12>
	  }
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	2000002c 	.word	0x2000002c

080007a0 <found>:



int found() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0

	uint8_t in[5] = "OK";
 80007a6:	f644 334f 	movw	r3, #19279	; 0x4b4f
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	2300      	movs	r3, #0
 80007ae:	723b      	strb	r3, [r7, #8]
    char* okSubstring = strstr(received, in);
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <found+0x30>)
 80007b6:	f002 fc85 	bl	80030c4 <strstr>
 80007ba:	60f8      	str	r0, [r7, #12]
    return (okSubstring != NULL);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <foundCREG>:

int foundCREG() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

	uint8_t in1[5] = "1,5";
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <foundCREG+0x4c>)
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	2300      	movs	r3, #0
 80007e0:	733b      	strb	r3, [r7, #12]
	uint8_t in2[5] = "1,1";
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <foundCREG+0x50>)
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	2300      	movs	r3, #0
 80007e8:	713b      	strb	r3, [r7, #4]
    char* okSubstring1 = strstr(received, in1);
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <foundCREG+0x54>)
 80007f2:	f002 fc67 	bl	80030c4 <strstr>
 80007f6:	6178      	str	r0, [r7, #20]
    char* okSubstring2 = strstr(received, in2);
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <foundCREG+0x54>)
 80007fe:	f002 fc61 	bl	80030c4 <strstr>
 8000802:	6138      	str	r0, [r7, #16]
    return (okSubstring1 != NULL || okSubstring1 != NULL);
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <foundCREG+0x3c>
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <foundCREG+0x40>
 8000810:	2301      	movs	r3, #1
 8000812:	e000      	b.n	8000816 <foundCREG+0x42>
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	00352c31 	.word	0x00352c31
 8000824:	00312c31 	.word	0x00312c31
 8000828:	2000002c 	.word	0x2000002c

0800082c <foundRING>:

int foundRING() {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0

	uint8_t in1[6] = "RING";
 8000832:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <foundRING+0x38>)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800083a:	6018      	str	r0, [r3, #0]
 800083c:	3304      	adds	r3, #4
 800083e:	7019      	strb	r1, [r3, #0]
 8000840:	2300      	movs	r3, #0
 8000842:	727b      	strb	r3, [r7, #9]
    char* okSubstring1 = strstr(received, in1);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4619      	mov	r1, r3
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <foundRING+0x3c>)
 800084a:	f002 fc3b 	bl	80030c4 <strstr>
 800084e:	60f8      	str	r0, [r7, #12]
    return (okSubstring1 != NULL);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf14      	ite	ne
 8000856:	2301      	movne	r3, #1
 8000858:	2300      	moveq	r3, #0
 800085a:	b2db      	uxtb	r3, r3
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	08003340 	.word	0x08003340
 8000868:	2000002c 	.word	0x2000002c

0800086c <foundMESSAGE>:

int foundMESSAGE() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

	uint8_t in1[9] = "MESSAGE";
 8000872:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <foundMESSAGE+0x38>)
 8000874:	463b      	mov	r3, r7
 8000876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800087a:	e883 0003 	stmia.w	r3, {r0, r1}
 800087e:	2300      	movs	r3, #0
 8000880:	723b      	strb	r3, [r7, #8]
    char* okSubstring1 = strstr(received, in1);
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <foundMESSAGE+0x3c>)
 8000888:	f002 fc1c 	bl	80030c4 <strstr>
 800088c:	60f8      	str	r0, [r7, #12]
    return (okSubstring1 != NULL);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08003348 	.word	0x08003348
 80008a8:	2000002c 	.word	0x2000002c

080008ac <clean>:
		 //HAL_Delay(1);
		 iterations++;
	  }
}

void clean(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	  //reset memory
	  memset(received, '\0', sizeof(received));
 80008b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80008b4:	2100      	movs	r1, #0
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <clean+0x1c>)
 80008b8:	f002 fbfc 	bl	80030b4 <memset>
	  char_counter = 0;
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <clean+0x20>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000002c 	.word	0x2000002c
 80008cc:	200001bc 	.word	0x200001bc

080008d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

	received[char_counter] = rxData[0];
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <HAL_UART_RxCpltCallback+0x28>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_UART_RxCpltCallback+0x2c>)
 80008de:	7811      	ldrb	r1, [r2, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <HAL_UART_RxCpltCallback+0x30>)
 80008e2:	54d1      	strb	r1, [r2, r3]
	char_counter = char_counter + 1;
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_UART_RxCpltCallback+0x28>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <HAL_UART_RxCpltCallback+0x28>)
 80008ec:	6013      	str	r3, [r2, #0]

}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	200001bc 	.word	0x200001bc
 80008fc:	20000028 	.word	0x20000028
 8000900:	2000002c 	.word	0x2000002c

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <HAL_MspInit+0x5c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_MspInit+0x5c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x5c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_MspInit+0x60>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_MspInit+0x60>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000
 8000970:	40010000 	.word	0x40010000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f000 f9d9 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <DMA1_Channel5_IRQHandler+0x10>)
 80009ca:	f000 fc8d 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000250 	.word	0x20000250

080009d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <DMA1_Channel6_IRQHandler+0x10>)
 80009de:	f000 fc83 	bl	80012e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000294 	.word	0x20000294

080009ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <USART1_IRQHandler+0x10>)
 80009f2:	f001 fc51 	bl	8002298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001c0 	.word	0x200001c0

08000a00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <USART2_IRQHandler+0x10>)
 8000a06:	f001 fc47 	bl	8002298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000208 	.word	0x20000208

08000a14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART1_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART1_UART_Init+0x4c>)
 8000a58:	f001 fb26 	bl	80020a8 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f7ff ff4f 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001c0 	.word	0x200001c0
 8000a70:	40013800 	.word	0x40013800

08000a74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <MX_USART2_UART_Init+0x50>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_USART2_UART_Init+0x4c>)
 8000aac:	f001 fafc 	bl	80020a8 <HAL_UART_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ab6:	f7ff ff25 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000208 	.word	0x20000208
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a65      	ldr	r2, [pc, #404]	; (8000c78 <HAL_UART_MspInit+0x1b0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d160      	bne.n	8000baa <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae8:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a63      	ldr	r2, [pc, #396]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a5d      	ldr	r2, [pc, #372]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4854      	ldr	r0, [pc, #336]	; (8000c80 <HAL_UART_MspInit+0x1b8>)
 8000b2e:	f000 fd0f 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	4619      	mov	r1, r3
 8000b46:	484e      	ldr	r0, [pc, #312]	; (8000c80 <HAL_UART_MspInit+0x1b8>)
 8000b48:	f000 fd02 	bl	8001550 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b4e:	4a4e      	ldr	r2, [pc, #312]	; (8000c88 <HAL_UART_MspInit+0x1c0>)
 8000b50:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b52:	4b4c      	ldr	r3, [pc, #304]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b58:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5e:	4b49      	ldr	r3, [pc, #292]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b64:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b6a:	4b46      	ldr	r3, [pc, #280]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b70:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b72:	2220      	movs	r2, #32
 8000b74:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b7c:	4841      	ldr	r0, [pc, #260]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b7e:	f000 fa45 	bl	800100c <HAL_DMA_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000b88:	f7ff febc 	bl	8000904 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a3d      	ldr	r2, [pc, #244]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b90:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b92:	4a3c      	ldr	r2, [pc, #240]	; (8000c84 <HAL_UART_MspInit+0x1bc>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2025      	movs	r0, #37	; 0x25
 8000b9e:	f000 f9fe 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ba2:	2025      	movs	r0, #37	; 0x25
 8000ba4:	f000 fa17 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ba8:	e062      	b.n	8000c70 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d15d      	bne.n	8000c70 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb4:	4b31      	ldr	r3, [pc, #196]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	4a30      	ldr	r2, [pc, #192]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbe:	61d3      	str	r3, [r2, #28]
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <HAL_UART_MspInit+0x1b4>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000be4:	2304      	movs	r3, #4
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4822      	ldr	r0, [pc, #136]	; (8000c80 <HAL_UART_MspInit+0x1b8>)
 8000bf8:	f000 fcaa 	bl	8001550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481c      	ldr	r0, [pc, #112]	; (8000c80 <HAL_UART_MspInit+0x1b8>)
 8000c10:	f000 fc9e 	bl	8001550 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c16:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000c18:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c46:	f000 f9e1 	bl	800100c <HAL_DMA_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000c50:	f7ff fe58 	bl	8000904 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c58:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2026      	movs	r0, #38	; 0x26
 8000c66:	f000 f99a 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c6a:	2026      	movs	r0, #38	; 0x26
 8000c6c:	f000 f9b3 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40013800 	.word	0x40013800
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010800 	.word	0x40010800
 8000c84:	20000250 	.word	0x20000250
 8000c88:	40020058 	.word	0x40020058
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	20000294 	.word	0x20000294
 8000c94:	4002006c 	.word	0x4002006c

08000c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c98:	f7ff febc 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cb4:	4c09      	ldr	r4, [pc, #36]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f002 fa15 	bl	80030f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc6:	f7ff fae3 	bl	8000290 <main>
  bx lr
 8000cca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd4:	080033a4 	.word	0x080033a4
  ldr r2, =_sbss
 8000cd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cdc:	200002dc 	.word	0x200002dc

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x28>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x28>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f947 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe06 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40022000 	.word	0x40022000

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f95f 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f927 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	200002d8 	.word	0x200002d8

08000d94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	200002d8 	.word	0x200002d8

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fff0 	bl	8000d94 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffe0 	bl	8000d94 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4906      	ldr	r1, [pc, #24]	; (8000e88 <__NVIC_EnableIRQ+0x34>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff90 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff2d 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff42 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff90 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5f 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff35 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa2 	bl	8000f44 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e043      	b.n	80010aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_DMA_Init+0xa8>)
 800102a:	4413      	add	r3, r2
 800102c:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <HAL_DMA_Init+0xac>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	009a      	lsls	r2, r3, #2
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <HAL_DMA_Init+0xb0>)
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2202      	movs	r2, #2
 8001044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001056:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800105a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800107c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	bffdfff8 	.word	0xbffdfff8
 80010b8:	cccccccd 	.word	0xcccccccd
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Start_IT+0x20>
 80010dc:	2302      	movs	r3, #2
 80010de:	e04b      	b.n	8001178 <HAL_DMA_Start_IT+0xb8>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d13a      	bne.n	800116a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2202      	movs	r2, #2
 80010f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0201 	bic.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 f9eb 	bl	80014f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 020e 	orr.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e00f      	b.n	8001158 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 020a 	orr.w	r2, r2, #10
 8001156:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e005      	b.n	8001176 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001172:	2302      	movs	r3, #2
 8001174:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001176:	7dfb      	ldrb	r3, [r7, #23]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d008      	beq.n	80011aa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2204      	movs	r2, #4
 800119c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e020      	b.n	80011ec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 020e 	bic.w	r2, r2, #14
 80011b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d2:	2101      	movs	r1, #1
 80011d4:	fa01 f202 	lsl.w	r2, r1, r2
 80011d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d005      	beq.n	800121c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2204      	movs	r2, #4
 8001214:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e051      	b.n	80012c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 020e 	bic.w	r2, r2, #14
 800122a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_DMA_Abort_IT+0xd4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d029      	beq.n	800129a <HAL_DMA_Abort_IT+0xa2>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <HAL_DMA_Abort_IT+0xd8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d022      	beq.n	8001296 <HAL_DMA_Abort_IT+0x9e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_DMA_Abort_IT+0xdc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01a      	beq.n	8001290 <HAL_DMA_Abort_IT+0x98>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <HAL_DMA_Abort_IT+0xe0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d012      	beq.n	800128a <HAL_DMA_Abort_IT+0x92>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_DMA_Abort_IT+0xe4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00a      	beq.n	8001284 <HAL_DMA_Abort_IT+0x8c>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <HAL_DMA_Abort_IT+0xe8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d102      	bne.n	800127e <HAL_DMA_Abort_IT+0x86>
 8001278:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800127c:	e00e      	b.n	800129c <HAL_DMA_Abort_IT+0xa4>
 800127e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001282:	e00b      	b.n	800129c <HAL_DMA_Abort_IT+0xa4>
 8001284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001288:	e008      	b.n	800129c <HAL_DMA_Abort_IT+0xa4>
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	e005      	b.n	800129c <HAL_DMA_Abort_IT+0xa4>
 8001290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001294:	e002      	b.n	800129c <HAL_DMA_Abort_IT+0xa4>
 8001296:	2310      	movs	r3, #16
 8001298:	e000      	b.n	800129c <HAL_DMA_Abort_IT+0xa4>
 800129a:	2301      	movs	r3, #1
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_DMA_Abort_IT+0xec>)
 800129e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4798      	blx	r3
    } 
  }
  return status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40020008 	.word	0x40020008
 80012d0:	4002001c 	.word	0x4002001c
 80012d4:	40020030 	.word	0x40020030
 80012d8:	40020044 	.word	0x40020044
 80012dc:	40020058 	.word	0x40020058
 80012e0:	4002006c 	.word	0x4002006c
 80012e4:	40020000 	.word	0x40020000

080012e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	2204      	movs	r2, #4
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d04f      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xc8>
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d04a      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0204 	bic.w	r2, r2, #4
 8001336:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a66      	ldr	r2, [pc, #408]	; (80014d8 <HAL_DMA_IRQHandler+0x1f0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d029      	beq.n	8001396 <HAL_DMA_IRQHandler+0xae>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a65      	ldr	r2, [pc, #404]	; (80014dc <HAL_DMA_IRQHandler+0x1f4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d022      	beq.n	8001392 <HAL_DMA_IRQHandler+0xaa>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01a      	beq.n	800138c <HAL_DMA_IRQHandler+0xa4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a62      	ldr	r2, [pc, #392]	; (80014e4 <HAL_DMA_IRQHandler+0x1fc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d012      	beq.n	8001386 <HAL_DMA_IRQHandler+0x9e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a60      	ldr	r2, [pc, #384]	; (80014e8 <HAL_DMA_IRQHandler+0x200>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00a      	beq.n	8001380 <HAL_DMA_IRQHandler+0x98>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a5f      	ldr	r2, [pc, #380]	; (80014ec <HAL_DMA_IRQHandler+0x204>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d102      	bne.n	800137a <HAL_DMA_IRQHandler+0x92>
 8001374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001378:	e00e      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 800137a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800137e:	e00b      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 8001380:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001384:	e008      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 8001386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800138a:	e005      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	e002      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	e000      	b.n	8001398 <HAL_DMA_IRQHandler+0xb0>
 8001396:	2304      	movs	r3, #4
 8001398:	4a55      	ldr	r2, [pc, #340]	; (80014f0 <HAL_DMA_IRQHandler+0x208>)
 800139a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8094 	beq.w	80014ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013ae:	e08e      	b.n	80014ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	2202      	movs	r2, #2
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d056      	beq.n	800146e <HAL_DMA_IRQHandler+0x186>
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d051      	beq.n	800146e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10b      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020a 	bic.w	r2, r2, #10
 80013e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <HAL_DMA_IRQHandler+0x1f0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d029      	beq.n	800144e <HAL_DMA_IRQHandler+0x166>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a37      	ldr	r2, [pc, #220]	; (80014dc <HAL_DMA_IRQHandler+0x1f4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d022      	beq.n	800144a <HAL_DMA_IRQHandler+0x162>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <HAL_DMA_IRQHandler+0x1f8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01a      	beq.n	8001444 <HAL_DMA_IRQHandler+0x15c>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d012      	beq.n	800143e <HAL_DMA_IRQHandler+0x156>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <HAL_DMA_IRQHandler+0x200>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00a      	beq.n	8001438 <HAL_DMA_IRQHandler+0x150>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a31      	ldr	r2, [pc, #196]	; (80014ec <HAL_DMA_IRQHandler+0x204>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d102      	bne.n	8001432 <HAL_DMA_IRQHandler+0x14a>
 800142c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001430:	e00e      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 8001432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001436:	e00b      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 8001438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143c:	e008      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 800143e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001442:	e005      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 8001444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001448:	e002      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 800144a:	2320      	movs	r3, #32
 800144c:	e000      	b.n	8001450 <HAL_DMA_IRQHandler+0x168>
 800144e:	2302      	movs	r3, #2
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_DMA_IRQHandler+0x208>)
 8001452:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d034      	beq.n	80014ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800146c:	e02f      	b.n	80014ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2208      	movs	r2, #8
 8001474:	409a      	lsls	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d028      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x1e8>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020e 	bic.w	r2, r2, #14
 8001496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
    }
  }
  return;
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
}
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020008 	.word	0x40020008
 80014dc:	4002001c 	.word	0x4002001c
 80014e0:	40020030 	.word	0x40020030
 80014e4:	40020044 	.word	0x40020044
 80014e8:	40020058 	.word	0x40020058
 80014ec:	4002006c 	.word	0x4002006c
 80014f0:	40020000 	.word	0x40020000

080014f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b10      	cmp	r3, #16
 8001520:	d108      	bne.n	8001534 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001532:	e007      	b.n	8001544 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b08b      	sub	sp, #44	; 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e169      	b.n	8001838 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001564:	2201      	movs	r2, #1
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8158 	bne.w	8001832 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a9a      	ldr	r2, [pc, #616]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d05e      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 800158c:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d875      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 8001592:	4a98      	ldr	r2, [pc, #608]	; (80017f4 <HAL_GPIO_Init+0x2a4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d058      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 8001598:	4a96      	ldr	r2, [pc, #600]	; (80017f4 <HAL_GPIO_Init+0x2a4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d86f      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 800159e:	4a96      	ldr	r2, [pc, #600]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d052      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015a4:	4a94      	ldr	r2, [pc, #592]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d869      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015aa:	4a94      	ldr	r2, [pc, #592]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d04c      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015b0:	4a92      	ldr	r2, [pc, #584]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d863      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015b6:	4a92      	ldr	r2, [pc, #584]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d046      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015bc:	4a90      	ldr	r2, [pc, #576]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d85d      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d82a      	bhi.n	800161c <HAL_GPIO_Init+0xcc>
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d859      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <HAL_GPIO_Init+0x80>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	08001625 	.word	0x08001625
 80015d8:	08001637 	.word	0x08001637
 80015dc:	08001679 	.word	0x08001679
 80015e0:	0800167f 	.word	0x0800167f
 80015e4:	0800167f 	.word	0x0800167f
 80015e8:	0800167f 	.word	0x0800167f
 80015ec:	0800167f 	.word	0x0800167f
 80015f0:	0800167f 	.word	0x0800167f
 80015f4:	0800167f 	.word	0x0800167f
 80015f8:	0800167f 	.word	0x0800167f
 80015fc:	0800167f 	.word	0x0800167f
 8001600:	0800167f 	.word	0x0800167f
 8001604:	0800167f 	.word	0x0800167f
 8001608:	0800167f 	.word	0x0800167f
 800160c:	0800167f 	.word	0x0800167f
 8001610:	0800167f 	.word	0x0800167f
 8001614:	0800162d 	.word	0x0800162d
 8001618:	08001641 	.word	0x08001641
 800161c:	4a79      	ldr	r2, [pc, #484]	; (8001804 <HAL_GPIO_Init+0x2b4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001622:	e02c      	b.n	800167e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e029      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	3304      	adds	r3, #4
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e024      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	3308      	adds	r3, #8
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e01f      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	330c      	adds	r3, #12
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e01a      	b.n	8001680 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001652:	2304      	movs	r3, #4
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e013      	b.n	8001680 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	611a      	str	r2, [r3, #16]
          break;
 800166a:	e009      	b.n	8001680 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	615a      	str	r2, [r3, #20]
          break;
 8001676:	e003      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x130>
          break;
 800167e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d801      	bhi.n	800168a <HAL_GPIO_Init+0x13a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	e001      	b.n	800168e <HAL_GPIO_Init+0x13e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d802      	bhi.n	800169c <HAL_GPIO_Init+0x14c>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x152>
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3b08      	subs	r3, #8
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	210f      	movs	r1, #15
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	6a39      	ldr	r1, [r7, #32]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80b1 	beq.w	8001832 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e8:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2bc>)
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a40      	ldr	r2, [pc, #256]	; (8001810 <HAL_GPIO_Init+0x2c0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d013      	beq.n	800173c <HAL_GPIO_Init+0x1ec>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3f      	ldr	r2, [pc, #252]	; (8001814 <HAL_GPIO_Init+0x2c4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1e8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3e      	ldr	r2, [pc, #248]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1e4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <HAL_GPIO_Init+0x2cc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1e0>
 800172c:	2303      	movs	r3, #3
 800172e:	e006      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001730:	2304      	movs	r3, #4
 8001732:	e004      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001734:	2302      	movs	r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 800173c:	2300      	movs	r3, #0
 800173e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001740:	f002 0203 	and.w	r2, r2, #3
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	4093      	lsls	r3, r2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174e:	492f      	ldr	r1, [pc, #188]	; (800180c <HAL_GPIO_Init+0x2bc>)
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	492c      	ldr	r1, [pc, #176]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	4928      	ldr	r1, [pc, #160]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001780:	4013      	ands	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4922      	ldr	r1, [pc, #136]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	491e      	ldr	r1, [pc, #120]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4918      	ldr	r1, [pc, #96]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4914      	ldr	r1, [pc, #80]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d021      	beq.n	8001824 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e021      	b.n	8001832 <HAL_GPIO_Init+0x2e2>
 80017ee:	bf00      	nop
 80017f0:	10320000 	.word	0x10320000
 80017f4:	10310000 	.word	0x10310000
 80017f8:	10220000 	.word	0x10220000
 80017fc:	10210000 	.word	0x10210000
 8001800:	10120000 	.word	0x10120000
 8001804:	10110000 	.word	0x10110000
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40011000 	.word	0x40011000
 800181c:	40011400 	.word	0x40011400
 8001820:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_GPIO_Init+0x304>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	43db      	mvns	r3, r3
 800182c:	4909      	ldr	r1, [pc, #36]	; (8001854 <HAL_GPIO_Init+0x304>)
 800182e:	4013      	ands	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	fa22 f303 	lsr.w	r3, r2, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	f47f ae8e 	bne.w	8001564 <HAL_GPIO_Init+0x14>
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	; 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
 8001864:	4613      	mov	r3, r2
 8001866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001868:	787b      	ldrb	r3, [r7, #1]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001874:	e003      	b.n	800187e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	041a      	lsls	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e272      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8087 	beq.w	80019b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a8:	4b92      	ldr	r3, [pc, #584]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d00c      	beq.n	80018ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b4:	4b8f      	ldr	r3, [pc, #572]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d112      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5e>
 80018c0:	4b8c      	ldr	r3, [pc, #560]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d10b      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ce:	4b89      	ldr	r3, [pc, #548]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d06c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x12c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d168      	bne.n	80019b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e24c      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x76>
 80018f0:	4b80      	ldr	r3, [pc, #512]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a7f      	ldr	r2, [pc, #508]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e02e      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x98>
 8001906:	4b7b      	ldr	r3, [pc, #492]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7a      	ldr	r2, [pc, #488]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b78      	ldr	r3, [pc, #480]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a77      	ldr	r2, [pc, #476]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0xbc>
 800192a:	4b72      	ldr	r3, [pc, #456]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a71      	ldr	r2, [pc, #452]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xd4>
 8001944:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6a      	ldr	r2, [pc, #424]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a67      	ldr	r2, [pc, #412]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fa16 	bl	8000d94 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fa12 	bl	8000d94 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e200      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xe4>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fa02 	bl	8000d94 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f9fe 	bl	8000d94 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1ec      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x10c>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d063      	beq.n	8001a8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c2:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00b      	beq.n	80019e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d11c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x18c>
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d116      	bne.n	8001a14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x176>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1c0      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4939      	ldr	r1, [pc, #228]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	e03a      	b.n	8001a8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff f9b7 	bl	8000d94 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff f9b3 	bl	8000d94 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1a1      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4927      	ldr	r1, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_RCC_OscConfig+0x270>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f996 	bl	8000d94 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff f992 	bl	8000d94 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e180      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03a      	beq.n	8001b0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d019      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f976 	bl	8000d94 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff f972 	bl	8000d94 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e160      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f000 face 	bl	800206c <RCC_Delay>
 8001ad0:	e01c      	b.n	8001b0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_OscConfig+0x274>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f95c 	bl	8000d94 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ade:	e00f      	b.n	8001b00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f958 	bl	8000d94 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d908      	bls.n	8001b00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e146      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	42420000 	.word	0x42420000
 8001afc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e9      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80a6 	beq.w	8001c66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10d      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a87      	ldr	r2, [pc, #540]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b85      	ldr	r3, [pc, #532]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <HAL_RCC_OscConfig+0x4c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <HAL_RCC_OscConfig+0x4c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7e      	ldr	r2, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x4c8>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f919 	bl	8000d94 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7ff f915 	bl	8000d94 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b64      	cmp	r3, #100	; 0x64
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e103      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	4b75      	ldr	r3, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x4c8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x312>
 8001b8c:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6213      	str	r3, [r2, #32]
 8001b98:	e02d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x334>
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a66      	ldr	r2, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	e01c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d10c      	bne.n	8001bde <HAL_RCC_OscConfig+0x356>
 8001bc4:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a5d      	ldr	r2, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	e00b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x36e>
 8001bde:	4b5b      	ldr	r3, [pc, #364]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a5a      	ldr	r2, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d015      	beq.n	8001c2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f8c9 	bl	8000d94 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7ff f8c5 	bl	8000d94 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0b1      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ee      	beq.n	8001c06 <HAL_RCC_OscConfig+0x37e>
 8001c28:	e014      	b.n	8001c54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f8b3 	bl	8000d94 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff f8af 	bl	8000d94 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e09b      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5a:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8087 	beq.w	8001d7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d061      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d146      	bne.n	8001d12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_RCC_OscConfig+0x4cc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f883 	bl	8000d94 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff f87f 	bl	8000d94 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e06d      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d108      	bne.n	8001ccc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4921      	ldr	r1, [pc, #132]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a19      	ldr	r1, [r3, #32]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	491b      	ldr	r1, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7ff f853 	bl	8000d94 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7ff f84f 	bl	8000d94 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e03d      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x46a>
 8001d10:	e035      	b.n	8001d7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x4cc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f83c 	bl	8000d94 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f838 	bl	8000d94 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e026      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x498>
 8001d3e:	e01e      	b.n	8001d7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e019      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40007000 	.word	0x40007000
 8001d54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_OscConfig+0x500>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d0      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4965      	ldr	r1, [pc, #404]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b8      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	494d      	ldr	r1, [pc, #308]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d040      	beq.n	8001eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d115      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e07f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e073      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06b      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4936      	ldr	r1, [pc, #216]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7fe ff8a 	bl	8000d94 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7fe ff86 	bl	8000d94 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e053      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d210      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4922      	ldr	r1, [pc, #136]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e032      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4916      	ldr	r1, [pc, #88]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	490e      	ldr	r1, [pc, #56]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1a:	f000 f821 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	490a      	ldr	r1, [pc, #40]	; (8001f54 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	5ccb      	ldrb	r3, [r1, r3]
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1cc>)
 8001f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1d0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fee8 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08003370 	.word	0x08003370
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d002      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x30>
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x36>
 8001f8e:	e027      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f92:	613b      	str	r3, [r7, #16]
      break;
 8001f94:	e027      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d010      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0c5b      	lsrs	r3, r3, #17
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fc2:	fb03 f202 	mul.w	r2, r3, r2
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e004      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	613b      	str	r3, [r7, #16]
      break;
 8001fde:	e002      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fe2:	613b      	str	r3, [r7, #16]
      break;
 8001fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe6:	693b      	ldr	r3, [r7, #16]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	007a1200 	.word	0x007a1200
 8001ffc:	08003388 	.word	0x08003388
 8002000:	08003398 	.word	0x08003398
 8002004:	003d0900 	.word	0x003d0900

08002008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800200c:	4b02      	ldr	r3, [pc, #8]	; (8002018 <HAL_RCC_GetHCLKFreq+0x10>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	20000000 	.word	0x20000000

0800201c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002020:	f7ff fff2 	bl	8002008 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4903      	ldr	r1, [pc, #12]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	08003380 	.word	0x08003380

08002044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002048:	f7ff ffde 	bl	8002008 <HAL_RCC_GetHCLKFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0adb      	lsrs	r3, r3, #11
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	4903      	ldr	r1, [pc, #12]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	08003380 	.word	0x08003380

0800206c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <RCC_Delay+0x34>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <RCC_Delay+0x38>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0a5b      	lsrs	r3, r3, #9
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002088:	bf00      	nop
  }
  while (Delay --);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	60fa      	str	r2, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f9      	bne.n	8002088 <RCC_Delay+0x1c>
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	20000000 	.word	0x20000000
 80020a4:	10624dd3 	.word	0x10624dd3

080020a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e042      	b.n	8002140 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fcfa 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 ff53 	bl	8002f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	d16d      	bne.n	8002244 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_UART_Transmit+0x2c>
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e066      	b.n	8002246 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2221      	movs	r2, #33	; 0x21
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002186:	f7fe fe05 	bl	8000d94 <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a0:	d108      	bne.n	80021b4 <HAL_UART_Transmit+0x6c>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d104      	bne.n	80021b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	e003      	b.n	80021bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021bc:	e02a      	b.n	8002214 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fc1b 	bl	8002a04 <UART_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e036      	b.n	8002246 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	3302      	adds	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	e007      	b.n	8002206 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	781a      	ldrb	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	3301      	adds	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1cf      	bne.n	80021be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2200      	movs	r2, #0
 8002226:	2140      	movs	r1, #64	; 0x40
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fbeb 	bl	8002a04 <UART_WaitOnFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e006      	b.n	8002246 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	e000      	b.n	8002246 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002244:	2302      	movs	r3, #2
  }
}
 8002246:	4618      	mov	r0, r3
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	4613      	mov	r3, r2
 800225a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	d112      	bne.n	800228e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_UART_Receive_DMA+0x26>
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e00b      	b.n	8002290 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	461a      	mov	r2, r3
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fc2b 	bl	8002ae0 <UART_Start_Receive_DMA>
 800228a:	4603      	mov	r3, r0
 800228c:	e000      	b.n	8002290 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800228e:	2302      	movs	r3, #2
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0ba      	sub	sp, #232	; 0xe8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80022d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_UART_IRQHandler+0x66>
 80022ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fd90 	bl	8002e1c <UART_Receive_IT>
      return;
 80022fc:	e25b      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80de 	beq.w	80024c4 <HAL_UART_IRQHandler+0x22c>
 8002308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002318:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80d1 	beq.w	80024c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_UART_IRQHandler+0xae>
 800232e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_UART_IRQHandler+0xd2>
 8002352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f043 0202 	orr.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800236a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_UART_IRQHandler+0xf6>
 8002376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f043 0204 	orr.w	r2, r3, #4
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800238e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d011      	beq.n	80023be <HAL_UART_IRQHandler+0x126>
 800239a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f043 0208 	orr.w	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 81f2 	beq.w	80027ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_UART_IRQHandler+0x14e>
 80023d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fd1b 	bl	8002e1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_UART_IRQHandler+0x17a>
 800240a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04f      	beq.n	80024b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fc25 	bl	8002c62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d041      	beq.n	80024aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002434:	e853 3f00 	ldrex	r3, [r3]
 8002438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800243c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3314      	adds	r3, #20
 800244e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800245e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002462:	e841 2300 	strex	r3, r2, [r1]
 8002466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800246a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1d9      	bne.n	8002426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d013      	beq.n	80024a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	4a7e      	ldr	r2, [pc, #504]	; (8002678 <HAL_UART_IRQHandler+0x3e0>)
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe feb6 	bl	80011f8 <HAL_DMA_Abort_IT>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800249c:	4610      	mov	r0, r2
 800249e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a0:	e00e      	b.n	80024c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f99c 	bl	80027e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	e00a      	b.n	80024c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f998 	bl	80027e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b0:	e006      	b.n	80024c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f994 	bl	80027e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80024be:	e175      	b.n	80027ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	bf00      	nop
    return;
 80024c2:	e173      	b.n	80027ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	f040 814f 	bne.w	800276c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8148 	beq.w	800276c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8141 	beq.w	800276c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80b6 	beq.w	800267c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800251c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8145 	beq.w	80027b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800252a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800252e:	429a      	cmp	r2, r3
 8002530:	f080 813e 	bcs.w	80027b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800253a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b20      	cmp	r3, #32
 8002544:	f000 8088 	beq.w	8002658 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002556:	e853 3f00 	ldrex	r3, [r3]
 800255a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800255e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002574:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002578:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002580:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002584:	e841 2300 	strex	r3, r2, [r1]
 8002588:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800258c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1d9      	bne.n	8002548 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e1      	bne.n	8002594 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3314      	adds	r3, #20
 80025d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80025e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3314      	adds	r3, #20
 80025f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80025f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80025fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002602:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e3      	bne.n	80025d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	330c      	adds	r3, #12
 800261c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002620:	e853 3f00 	ldrex	r3, [r3]
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	f023 0310 	bic.w	r3, r3, #16
 800262c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800263a:	65ba      	str	r2, [r7, #88]	; 0x58
 800263c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002642:	e841 2300 	strex	r3, r2, [r1]
 8002646:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e3      	bne.n	8002616 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fd94 	bl	8001180 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002666:	b29b      	uxth	r3, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	b29b      	uxth	r3, r3
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f8bf 	bl	80027f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002674:	e09c      	b.n	80027b0 <HAL_UART_IRQHandler+0x518>
 8002676:	bf00      	nop
 8002678:	08002d27 	.word	0x08002d27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002684:	b29b      	uxth	r3, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 808e 	beq.w	80027b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8089 	beq.w	80027b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026c6:	647a      	str	r2, [r7, #68]	; 0x44
 80026c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80026d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e3      	bne.n	80026a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3314      	adds	r3, #20
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	e853 3f00 	ldrex	r3, [r3]
 80026e8:	623b      	str	r3, [r7, #32]
   return(result);
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026fe:	633a      	str	r2, [r7, #48]	; 0x30
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e3      	bne.n	80026da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	e853 3f00 	ldrex	r3, [r3]
 800272e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0310 	bic.w	r3, r3, #16
 8002736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002744:	61fa      	str	r2, [r7, #28]
 8002746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	e841 2300 	strex	r3, r2, [r1]
 8002750:	617b      	str	r3, [r7, #20]
   return(result);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e3      	bne.n	8002720 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800275e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002762:	4619      	mov	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f844 	bl	80027f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800276a:	e023      	b.n	80027b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800276c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b00      	cmp	r3, #0
 8002776:	d009      	beq.n	800278c <HAL_UART_IRQHandler+0x4f4>
 8002778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fae2 	bl	8002d4e <UART_Transmit_IT>
    return;
 800278a:	e014      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800278c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <HAL_UART_IRQHandler+0x51e>
 8002798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fb21 	bl	8002dec <UART_EndTransmit_IT>
    return;
 80027aa:	e004      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80027ac:	bf00      	nop
 80027ae:	e002      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80027b0:	bf00      	nop
 80027b2:	e000      	b.n	80027b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80027b4:	bf00      	nop
  }
}
 80027b6:	37e8      	adds	r7, #232	; 0xe8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b09c      	sub	sp, #112	; 0x70
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d172      	bne.n	800290a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002826:	2200      	movs	r2, #0
 8002828:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800282a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002840:	66bb      	str	r3, [r7, #104]	; 0x68
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800284a:	65ba      	str	r2, [r7, #88]	; 0x58
 800284c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e5      	bne.n	800282a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	667b      	str	r3, [r7, #100]	; 0x64
 8002876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3314      	adds	r3, #20
 800287c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800287e:	647a      	str	r2, [r7, #68]	; 0x44
 8002880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800288c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e5      	bne.n	800285e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3314      	adds	r3, #20
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	623b      	str	r3, [r7, #32]
   return(result);
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a8:	663b      	str	r3, [r7, #96]	; 0x60
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3314      	adds	r3, #20
 80028b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028b2:	633a      	str	r2, [r7, #48]	; 0x30
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e5      	bne.n	8002892 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d119      	bne.n	800290a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f023 0310 	bic.w	r3, r3, #16
 80028ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	330c      	adds	r3, #12
 80028f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80028f6:	61fa      	str	r2, [r7, #28]
 80028f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	617b      	str	r3, [r7, #20]
   return(result);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e5      	bne.n	80028d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800290a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800290c:	2200      	movs	r2, #0
 800290e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800291c:	4619      	mov	r1, r3
 800291e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002920:	f7ff ff67 	bl	80027f2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002924:	e002      	b.n	800292c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002926:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002928:	f7fd ffd2 	bl	80008d0 <HAL_UART_RxCpltCallback>
}
 800292c:	bf00      	nop
 800292e:	3770      	adds	r7, #112	; 0x70
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	2b01      	cmp	r3, #1
 800294e:	d108      	bne.n	8002962 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	b29b      	uxth	r3, r3
 8002958:	4619      	mov	r1, r3
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff ff49 	bl	80027f2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002960:	e002      	b.n	8002968 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff ff33 	bl	80027ce <HAL_UART_RxHalfCpltCallback>
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b21      	cmp	r3, #33	; 0x21
 80029a2:	d108      	bne.n	80029b6 <UART_DMAError+0x46>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80029b0:	68b8      	ldr	r0, [r7, #8]
 80029b2:	f000 f92f 	bl	8002c14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b22      	cmp	r3, #34	; 0x22
 80029d6:	d108      	bne.n	80029ea <UART_DMAError+0x7a>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2200      	movs	r2, #0
 80029e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80029e4:	68b8      	ldr	r0, [r7, #8]
 80029e6:	f000 f93c 	bl	8002c62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029f6:	68b8      	ldr	r0, [r7, #8]
 80029f8:	f7ff fef2 	bl	80027e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b090      	sub	sp, #64	; 0x40
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a14:	e050      	b.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d04c      	beq.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a24:	f7fe f9b6 	bl	8000d94 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d241      	bcs.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a54:	637a      	str	r2, [r7, #52]	; 0x34
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e5      	bne.n	8002a34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3314      	adds	r3, #20
 8002a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	e853 3f00 	ldrex	r3, [r3]
 8002a76:	613b      	str	r3, [r7, #16]
   return(result);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3314      	adds	r3, #20
 8002a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a88:	623a      	str	r2, [r7, #32]
 8002a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	69f9      	ldr	r1, [r7, #28]
 8002a8e:	6a3a      	ldr	r2, [r7, #32]
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e5      	bne.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e00f      	b.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d09f      	beq.n	8002a16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3740      	adds	r7, #64	; 0x40
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b098      	sub	sp, #96	; 0x60
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2222      	movs	r2, #34	; 0x22
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	4a3e      	ldr	r2, [pc, #248]	; (8002c08 <UART_Start_Receive_DMA+0x128>)
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	4a3d      	ldr	r2, [pc, #244]	; (8002c0c <UART_Start_Receive_DMA+0x12c>)
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	4a3c      	ldr	r2, [pc, #240]	; (8002c10 <UART_Start_Receive_DMA+0x130>)
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	2200      	movs	r2, #0
 8002b26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002b28:	f107 0308 	add.w	r3, r7, #8
 8002b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3304      	adds	r3, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	f7fe fabe 	bl	80010c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d019      	beq.n	8002b96 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b82:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e5      	bne.n	8002b62 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3314      	adds	r3, #20
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	657b      	str	r3, [r7, #84]	; 0x54
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3314      	adds	r3, #20
 8002bb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bb6:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e5      	bne.n	8002b96 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3314      	adds	r3, #20
 8002bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be0:	653b      	str	r3, [r7, #80]	; 0x50
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bea:	627a      	str	r2, [r7, #36]	; 0x24
 8002bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e5      	bne.n	8002bca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3760      	adds	r7, #96	; 0x60
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	08002809 	.word	0x08002809
 8002c0c:	08002935 	.word	0x08002935
 8002c10:	08002971 	.word	0x08002971

08002c14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	330c      	adds	r3, #12
 8002c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	61ba      	str	r2, [r7, #24]
 8002c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	6979      	ldr	r1, [r7, #20]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	613b      	str	r3, [r7, #16]
   return(result);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e5      	bne.n	8002c1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002c58:	bf00      	nop
 8002c5a:	3724      	adds	r7, #36	; 0x24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b095      	sub	sp, #84	; 0x54
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c8a:	643a      	str	r2, [r7, #64]	; 0x40
 8002c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e5      	bne.n	8002c9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d119      	bne.n	8002d0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	330c      	adds	r3, #12
 8002ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f023 0310 	bic.w	r3, r3, #16
 8002cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	330c      	adds	r3, #12
 8002cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cfa:	61ba      	str	r2, [r7, #24]
 8002cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	6979      	ldr	r1, [r7, #20]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	613b      	str	r3, [r7, #16]
   return(result);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e5      	bne.n	8002cda <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d1c:	bf00      	nop
 8002d1e:	3754      	adds	r7, #84	; 0x54
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fd4d 	bl	80027e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b21      	cmp	r3, #33	; 0x21
 8002d60:	d13e      	bne.n	8002de0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6a:	d114      	bne.n	8002d96 <UART_Transmit_IT+0x48>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d110      	bne.n	8002d96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	1c9a      	adds	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	621a      	str	r2, [r3, #32]
 8002d94:	e008      	b.n	8002da8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6211      	str	r1, [r2, #32]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4619      	mov	r1, r3
 8002db6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fcd5 	bl	80027bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	; 0x30
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b22      	cmp	r3, #34	; 0x22
 8002e2e:	f040 80ae 	bne.w	8002f8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d117      	bne.n	8002e6c <UART_Receive_IT+0x50>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d113      	bne.n	8002e6c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	1c9a      	adds	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
 8002e6a:	e026      	b.n	8002eba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7e:	d007      	beq.n	8002e90 <UART_Receive_IT+0x74>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <UART_Receive_IT+0x82>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e008      	b.n	8002eb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d15d      	bne.n	8002f8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0220 	bic.w	r2, r2, #32
 8002edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d135      	bne.n	8002f80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f023 0310 	bic.w	r3, r3, #16
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	623a      	str	r2, [r7, #32]
 8002f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	69f9      	ldr	r1, [r7, #28]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	e841 2300 	strex	r3, r2, [r1]
 8002f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e5      	bne.n	8002f1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d10a      	bne.n	8002f72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff fc3a 	bl	80027f2 <HAL_UARTEx_RxEventCallback>
 8002f7e:	e002      	b.n	8002f86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fd fca5 	bl	80008d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e002      	b.n	8002f90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3730      	adds	r7, #48	; 0x30
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fd2:	f023 030c 	bic.w	r3, r3, #12
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2c      	ldr	r2, [pc, #176]	; (80030ac <UART_SetConfig+0x114>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003000:	f7ff f820 	bl	8002044 <HAL_RCC_GetPCLK2Freq>
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	e002      	b.n	800300e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003008:	f7ff f808 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 800300c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009a      	lsls	r2, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <UART_SetConfig+0x118>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	0119      	lsls	r1, r3, #4
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	009a      	lsls	r2, r3, #2
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fbb2 f2f3 	udiv	r2, r2, r3
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <UART_SetConfig+0x118>)
 8003046:	fba3 0302 	umull	r0, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2064      	movs	r0, #100	; 0x64
 800304e:	fb00 f303 	mul.w	r3, r0, r3
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	3332      	adds	r3, #50	; 0x32
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <UART_SetConfig+0x118>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003064:	4419      	add	r1, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	fbb2 f2f3 	udiv	r2, r2, r3
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <UART_SetConfig+0x118>)
 800307e:	fba3 0302 	umull	r0, r3, r3, r2
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2064      	movs	r0, #100	; 0x64
 8003086:	fb00 f303 	mul.w	r3, r0, r3
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	3332      	adds	r3, #50	; 0x32
 8003090:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <UART_SetConfig+0x118>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	440a      	add	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40013800 	.word	0x40013800
 80030b0:	51eb851f 	.word	0x51eb851f

080030b4 <memset>:
 80030b4:	4603      	mov	r3, r0
 80030b6:	4402      	add	r2, r0
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d100      	bne.n	80030be <memset+0xa>
 80030bc:	4770      	bx	lr
 80030be:	f803 1b01 	strb.w	r1, [r3], #1
 80030c2:	e7f9      	b.n	80030b8 <memset+0x4>

080030c4 <strstr>:
 80030c4:	780a      	ldrb	r2, [r1, #0]
 80030c6:	b570      	push	{r4, r5, r6, lr}
 80030c8:	b96a      	cbnz	r2, 80030e6 <strstr+0x22>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d109      	bne.n	80030e4 <strstr+0x20>
 80030d0:	460c      	mov	r4, r1
 80030d2:	4605      	mov	r5, r0
 80030d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f6      	beq.n	80030ca <strstr+0x6>
 80030dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80030e0:	429e      	cmp	r6, r3
 80030e2:	d0f7      	beq.n	80030d4 <strstr+0x10>
 80030e4:	3001      	adds	r0, #1
 80030e6:	7803      	ldrb	r3, [r0, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ef      	bne.n	80030cc <strstr+0x8>
 80030ec:	4618      	mov	r0, r3
 80030ee:	e7ec      	b.n	80030ca <strstr+0x6>

080030f0 <__libc_init_array>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	2600      	movs	r6, #0
 80030f4:	4d0c      	ldr	r5, [pc, #48]	; (8003128 <__libc_init_array+0x38>)
 80030f6:	4c0d      	ldr	r4, [pc, #52]	; (800312c <__libc_init_array+0x3c>)
 80030f8:	1b64      	subs	r4, r4, r5
 80030fa:	10a4      	asrs	r4, r4, #2
 80030fc:	42a6      	cmp	r6, r4
 80030fe:	d109      	bne.n	8003114 <__libc_init_array+0x24>
 8003100:	f000 f81a 	bl	8003138 <_init>
 8003104:	2600      	movs	r6, #0
 8003106:	4d0a      	ldr	r5, [pc, #40]	; (8003130 <__libc_init_array+0x40>)
 8003108:	4c0a      	ldr	r4, [pc, #40]	; (8003134 <__libc_init_array+0x44>)
 800310a:	1b64      	subs	r4, r4, r5
 800310c:	10a4      	asrs	r4, r4, #2
 800310e:	42a6      	cmp	r6, r4
 8003110:	d105      	bne.n	800311e <__libc_init_array+0x2e>
 8003112:	bd70      	pop	{r4, r5, r6, pc}
 8003114:	f855 3b04 	ldr.w	r3, [r5], #4
 8003118:	4798      	blx	r3
 800311a:	3601      	adds	r6, #1
 800311c:	e7ee      	b.n	80030fc <__libc_init_array+0xc>
 800311e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003122:	4798      	blx	r3
 8003124:	3601      	adds	r6, #1
 8003126:	e7f2      	b.n	800310e <__libc_init_array+0x1e>
 8003128:	0800339c 	.word	0x0800339c
 800312c:	0800339c 	.word	0x0800339c
 8003130:	0800339c 	.word	0x0800339c
 8003134:	080033a0 	.word	0x080033a0

08003138 <_init>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	bf00      	nop
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr

08003144 <_fini>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr
